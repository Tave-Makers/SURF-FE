import fs from 'fs';
import path from 'path';

// 타입 정의
interface LetterSpacing {
  unit: 'PERCENT' | string;
  value: number;
}

interface TextStyle {
  name: string;
  fontFamily: string;
  fontWeight:
    | 'thin'
    | 'extraLight'
    | 'light'
    | 'regular'
    | 'medium'
    | 'semiBold'
    | 'bold'
    | 'extraBold'
    | 'black'
    | string;
  fontSize: number;
  letterSpacing?: LetterSpacing;
  textCase?: 'ORIGINAL' | string;
}

interface TokenFile {
  fileName: string;
  textStyles: TextStyle[];
}

// 원시 토큰 로드
const fontTokensPath = path.resolve('tokens/typography.json');

// 실사용 토큰 경로 설정
const outPath = path.resolve('src/shared/styles/font-tokens.css');

// JSON 로드
const tokens: TokenFile = JSON.parse(fs.readFileSync(fontTokensPath, 'utf-8'));
const styles: TextStyle[] = tokens.textStyles;

// 유틸리티 클래스 생성
let cssOutput = `/*auto generated by convert-typo.ts*/\n@layer utilities {\n`;

styles.forEach((style: TextStyle) => {
  const className = style.name.replace(/\//g, '-').replace(/_/g, '-').toLowerCase();

  // font-weight 처리
  const weightMap: Record<string, number> = {
    thin: 100,
    extraLight: 200,
    light: 300,
    regular: 400,
    medium: 500,
    semiBold: 600,
    bold: 700,
    extraBold: 800,
    black: 900,
  };
  const fontWeight: string | number = weightMap[style.fontWeight.toLowerCase()] ?? style.fontWeight;

  // letterSpacing 변환 (퍼센트 → em)
  let letterSpacing = '';
  if (style.letterSpacing?.unit === 'PERCENT') {
    letterSpacing = style.letterSpacing.value / 100 + 'em';
  }

  cssOutput += `  .text-${className} {
    font-family: ${style.fontFamily}, sans-serif;
    font-size: ${style.fontSize}px;
    font-weight: ${fontWeight};
    ${letterSpacing ? `letter-spacing: ${letterSpacing};` : ''}
  }\n`;
});

cssOutput += `}\n`;

fs.writeFileSync(outPath, cssOutput, 'utf-8');
console.log(`✅ Generated ${outPath}`);
